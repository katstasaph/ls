# 1.
# COUNTDOWN_START = 10

# def decrease(counter)
  # counter - 1
# end

# counter = COUNTDOWN_START

# COUNTDOWN_START.times do
  # puts counter
  # counter = decrease(counter)
# end

# puts 'LAUNCH!'

# 2.
# def shout_out_to(name)
  # puts "HEY " + name.upcase!
# end

# 3.
def valid_series?(nums)
  return false if nums.sum != 47

  odd_count = nums.count { |n| n.odd? }
  odd_count == 3 ? true : false
end

p valid_series?([5, 6, 2, 7, 3, 12, 4, 8])        # should return true
p valid_series?([1, 12, 2, 5, 16, 6])             # should return false
p valid_series?([28, 3, 4, 7, 9, 14])             # should return false
p valid_series?([20, 6, 9, 4, 2, 1, 2, 3])        # should return true
p valid_series?([10, 6, 19, 2, 6, 4])             # should return false

# 4.
# def reverse_sentence(sentence)
  # words = sentence.split(' ')
  # reversed_words = []

  # i = words.length - 1
  # while i >= 0
    # reversed_words << words[i]
    # i -= 1
  # end

  # reversed_words.join(' ')
# end

# 5.
# cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, :jack, :queen, :king, :ace]

# deck = { :hearts   => cards.dup,
         # :diamonds => cards.dup,
         # :clubs    => cards.dup,
         # :spades   => cards.dup }

# def score(card)
  # case card
  # when :ace   then 11
  # when :king  then 10
  # when :queen then 10
  # when :jack  then 10
  # else card
  # end
# end

# # Pick one random card per suit

# player_cards = []
# deck.keys.each do |suit|
  # cards = deck[suit]
  # cards.shuffle!
  # player_cards << cards.pop
# end

# # Determine the score of the remaining cards in the deck

# sum = deck.reduce(0) do |sum, (_, remaining_cards)|
  # scores = remaining_cards.map do |card|
    # score(card)
  # end

  # sum += scores.sum
# end

# 6.
# def move(n, from_array, to_array)
  # return if n <= 0 || from_array.empty?
  # to_array << from_array.shift
  # move(n - 1, from_array, to_array)
# end

# 7.
# def neutralize(sentence)
  # sentence.split(" ").reject { |word| negative?(word) }.join(" ")
# end

# def negative?(word)
  # [ 'dull',
    # 'boring',
    # 'annoying',
    # 'chaotic'
  # ].include?(word)
# end

# 8.
# password = nil

# def set_password
  # puts 'What would you like your password to be?'
  # gets.chomp
# end

# def verify_password(password)
  # puts '** Login **'
  # print 'Password: '
  # input = gets.chomp

  # if input == password
    # puts 'Welcome to the inside!'
  # else
    # puts 'Authentication failed.'
  # end
# end

# if !password
  # password = set_password
# end

# verify_password(password)

# 9.
# def valid_integer?(string)
  # string.to_i.to_s == string
# end


# def guess_number(max_number, max_attempts)
  # winning_number = (1..max_number).to_a.sample
  # attempts = 0

  # loop do
    # attempts += 1
    # break if attempts > max_attempts

    # input = nil
    # until valid_integer?(input)
      # print 'Make a guess: '
      # input = gets.chomp
    # end

    # guess = input.to_i

    # if guess == winning_number
      # puts 'Yes! You win.'
      # return
    # else
      # puts 'Nope. Too small.' if guess < winning_number
      # puts 'Nope. Too big.'   if guess > winning_number
    # end
  # end
  # puts "Sorry, you didn't guess in time! The number was #{winning_number}."
# end

# 10.
# def tf(term, document)
  # document.split(/[\W]/).count { |word| word.downcase == term }
# end

# # changed int division to float division; added check for 0 denominator
# def idf(term, documents)
  # number_of_documents = documents.length
  # number_of_documents_with_term = documents.count { |d| tf(term, d) > 0 }
  # number_of_documents_with_term == 0 ? 0 : Math.log(number_of_documents.fdiv(number_of_documents_with_term))
# end

# 11.
# p arr.sort { |x, y| y.to_i <=> x.to_i }